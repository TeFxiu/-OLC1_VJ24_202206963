// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Analizadores/lexico.jflex

package Analizadores;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import excepciones.ErrorS;


@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  0,  0,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 22, 23,  0, 
     0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 
    39, 33, 40, 41, 42, 43, 44, 45, 33, 33, 33, 46, 47, 48, 49, 50, 
     0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 
    39, 33, 40, 41, 42, 43, 44, 45, 33, 33, 33, 51, 52, 53,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\21\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\1\1\32\1\33\1\0"+
    "\1\34\1\0\1\35\2\0\1\36\1\37\1\40\1\0"+
    "\1\2\1\0\1\41\1\42\1\43\1\44\5\24\1\45"+
    "\3\24\1\46\13\24\1\47\1\50\1\34\1\51\1\0"+
    "\1\52\10\24\1\53\1\54\2\24\1\55\6\24\1\56"+
    "\2\24\1\2\1\24\1\57\1\24\1\60\3\24\1\61"+
    "\1\62\7\24\1\63\1\64\2\24\1\65\1\66\2\24"+
    "\1\67\6\24\1\70\1\71\1\24\1\72\1\24\1\73"+
    "\1\74\1\24\1\75\1\76\1\24\1\77\1\24\1\100"+
    "\2\24\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\66\0\u010e\0\u0144"+
    "\0\66\0\66\0\u017a\0\u01b0\0\66\0\u01e6\0\66\0\u021c"+
    "\0\u0252\0\66\0\66\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0"+
    "\0\66\0\66\0\66\0\66\0\u06f6\0\66\0\66\0\330"+
    "\0\66\0\u072c\0\66\0\u0762\0\u0798\0\66\0\66\0\66"+
    "\0\u07ce\0\u0804\0\u083a\0\66\0\66\0\66\0\66\0\u0870"+
    "\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u046e\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\66\0\66\0\330\0\66"+
    "\0\u0ca8\0\u083a\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u046e\0\u046e\0\u0e8e\0\u0ec4\0\u046e\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u046e\0\u103e\0\u1074"+
    "\0\u07ce\0\u10aa\0\u046e\0\u10e0\0\u046e\0\u1116\0\u114c\0\u1182"+
    "\0\u046e\0\u046e\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u046e\0\u046e\0\u1332\0\u1368\0\u046e\0\u046e\0\u139e"+
    "\0\u13d4\0\u046e\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518"+
    "\0\u046e\0\u046e\0\u154e\0\u046e\0\u1584\0\u046e\0\u046e\0\u15ba"+
    "\0\u046e\0\u046e\0\u15f0\0\u046e\0\u1626\0\u046e\0\u165c\0\u1692"+
    "\0\u046e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\35\1\36\2\35"+
    "\1\37\1\40\1\41\1\35\1\42\1\43\1\44\1\45"+
    "\1\35\1\46\1\47\1\50\1\2\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\67\0\2\3\1\0\1\3\107\0"+
    "\1\57\37\0\2\60\1\0\3\60\1\61\50\60\1\62"+
    "\6\60\10\0\1\63\55\0\2\64\1\0\6\64\1\0"+
    "\45\64\1\65\6\64\14\0\1\66\66\0\1\67\67\0"+
    "\1\70\62\0\1\71\4\0\1\72\64\0\1\73\1\0"+
    "\1\21\71\0\1\74\65\0\1\75\1\76\64\0\1\77"+
    "\61\0\1\35\5\0\17\35\1\100\6\35\4\0\1\35"+
    "\25\0\1\35\5\0\16\35\1\101\1\35\1\102\5\35"+
    "\4\0\1\35\25\0\1\35\5\0\7\35\1\103\6\35"+
    "\1\104\7\35\4\0\1\35\25\0\1\35\5\0\16\35"+
    "\1\105\7\35\4\0\1\35\25\0\1\35\5\0\13\35"+
    "\1\106\12\35\4\0\1\35\25\0\1\35\5\0\1\107"+
    "\15\35\1\110\7\35\4\0\1\35\25\0\1\35\5\0"+
    "\26\35\4\0\1\35\25\0\1\35\5\0\5\35\1\111"+
    "\7\35\1\112\10\35\4\0\1\35\25\0\1\35\5\0"+
    "\10\35\1\113\15\35\4\0\1\35\25\0\1\35\5\0"+
    "\1\114\25\35\4\0\1\35\25\0\1\35\5\0\4\35"+
    "\1\115\21\35\4\0\1\35\25\0\1\35\5\0\20\35"+
    "\1\116\5\35\4\0\1\35\25\0\1\35\5\0\4\35"+
    "\1\117\21\35\4\0\1\35\25\0\1\35\5\0\22\35"+
    "\1\120\3\35\4\0\1\35\25\0\1\35\5\0\20\35"+
    "\1\121\5\35\4\0\1\35\25\0\1\35\5\0\1\122"+
    "\15\35\1\123\7\35\4\0\1\35\25\0\1\35\5\0"+
    "\7\35\1\124\16\35\4\0\1\35\63\0\1\125\71\0"+
    "\1\126\1\0\2\60\1\0\3\60\1\127\50\60\1\62"+
    "\6\60\11\0\1\130\54\0\2\64\3\0\61\64\14\71"+
    "\1\131\51\71\2\72\1\0\63\72\22\0\1\132\65\0"+
    "\1\35\5\0\17\35\1\133\6\35\4\0\1\35\25\0"+
    "\1\35\5\0\16\35\1\134\7\35\4\0\1\35\25\0"+
    "\1\35\5\0\4\35\1\135\21\35\4\0\1\35\25\0"+
    "\1\35\5\0\1\136\25\35\4\0\1\35\25\0\1\35"+
    "\5\0\15\35\1\137\10\35\4\0\1\35\25\0\1\35"+
    "\5\0\23\35\1\140\2\35\4\0\1\35\25\0\1\35"+
    "\5\0\21\35\1\141\4\35\4\0\1\35\25\0\1\35"+
    "\5\0\13\35\1\142\12\35\4\0\1\35\25\0\1\35"+
    "\5\0\20\35\1\143\5\35\4\0\1\35\25\0\1\35"+
    "\5\0\22\35\1\144\3\35\4\0\1\35\25\0\1\35"+
    "\5\0\21\35\1\145\4\35\4\0\1\35\25\0\1\35"+
    "\5\0\22\35\1\146\3\35\4\0\1\35\25\0\1\35"+
    "\5\0\25\35\1\147\4\0\1\35\25\0\1\35\5\0"+
    "\10\35\1\150\15\35\4\0\1\35\25\0\1\35\5\0"+
    "\14\35\1\151\5\35\1\152\3\35\4\0\1\35\25\0"+
    "\1\35\5\0\1\153\17\35\1\154\5\35\4\0\1\35"+
    "\25\0\1\35\5\0\23\35\1\155\2\35\4\0\1\35"+
    "\25\0\1\35\5\0\20\35\1\156\5\35\4\0\1\35"+
    "\25\0\1\35\5\0\10\35\1\157\15\35\4\0\1\35"+
    "\25\0\1\35\5\0\10\35\1\160\15\35\4\0\1\35"+
    "\3\0\14\71\1\131\4\71\1\161\44\71\22\0\1\35"+
    "\5\0\4\35\1\162\21\35\4\0\1\35\25\0\1\35"+
    "\5\0\13\35\1\163\12\35\4\0\1\35\25\0\1\35"+
    "\5\0\1\164\25\35\4\0\1\35\25\0\1\35\5\0"+
    "\20\35\1\165\5\35\4\0\1\35\25\0\1\35\5\0"+
    "\21\35\1\166\1\167\3\35\4\0\1\35\25\0\1\35"+
    "\5\0\1\35\1\170\24\35\4\0\1\35\25\0\1\35"+
    "\5\0\4\35\1\171\21\35\4\0\1\35\25\0\1\35"+
    "\5\0\21\35\1\155\4\35\4\0\1\35\25\0\1\35"+
    "\5\0\22\35\1\172\3\35\4\0\1\35\25\0\1\35"+
    "\5\0\2\35\1\173\23\35\4\0\1\35\25\0\1\35"+
    "\5\0\15\35\1\174\10\35\4\0\1\35\25\0\1\35"+
    "\5\0\16\35\1\175\7\35\4\0\1\35\25\0\1\35"+
    "\5\0\23\35\1\176\2\35\4\0\1\35\25\0\1\35"+
    "\5\0\20\35\1\177\5\35\4\0\1\35\25\0\1\35"+
    "\5\0\10\35\1\200\12\35\1\201\2\35\4\0\1\35"+
    "\25\0\1\35\5\0\4\35\1\202\21\35\4\0\1\35"+
    "\25\0\1\35\5\0\3\35\1\203\22\35\4\0\1\35"+
    "\25\0\1\35\5\0\13\35\1\204\12\35\4\0\1\35"+
    "\25\0\1\35\5\0\15\35\1\205\10\35\4\0\1\35"+
    "\25\0\1\35\5\0\12\35\1\206\13\35\4\0\1\35"+
    "\25\0\1\35\5\0\22\35\1\207\3\35\4\0\1\35"+
    "\25\0\1\35\5\0\10\35\1\210\15\35\4\0\1\35"+
    "\25\0\1\35\5\0\13\35\1\211\12\35\4\0\1\35"+
    "\25\0\1\35\5\0\7\35\1\212\16\35\4\0\1\35"+
    "\25\0\1\35\5\0\22\35\1\213\3\35\4\0\1\35"+
    "\25\0\1\35\5\0\24\35\1\214\1\35\4\0\1\35"+
    "\25\0\1\35\5\0\20\35\1\215\5\35\4\0\1\35"+
    "\25\0\1\35\5\0\22\35\1\216\3\35\4\0\1\35"+
    "\25\0\1\35\5\0\15\35\1\217\10\35\4\0\1\35"+
    "\25\0\1\35\5\0\2\35\1\220\23\35\4\0\1\35"+
    "\25\0\1\35\5\0\4\35\1\221\21\35\4\0\1\35"+
    "\25\0\1\35\5\0\3\35\1\222\22\35\4\0\1\35"+
    "\25\0\1\35\5\0\15\35\1\223\10\35\4\0\1\35"+
    "\25\0\1\35\5\0\4\35\1\224\21\35\4\0\1\35"+
    "\25\0\1\35\5\0\13\35\1\225\12\35\4\0\1\35"+
    "\25\0\1\35\5\0\4\35\1\226\21\35\4\0\1\35"+
    "\25\0\1\35\5\0\15\35\1\227\10\35\4\0\1\35"+
    "\25\0\1\35\5\0\26\35\4\0\1\230\25\0\1\35"+
    "\5\0\6\35\1\231\17\35\4\0\1\35\25\0\1\35"+
    "\5\0\22\35\1\232\3\35\4\0\1\35\25\0\1\35"+
    "\5\0\23\35\1\233\2\35\4\0\1\35\25\0\1\35"+
    "\5\0\15\35\1\234\10\35\4\0\1\35\25\0\1\35"+
    "\5\0\25\35\1\235\4\0\1\35\25\0\1\35\5\0"+
    "\4\35\1\236\21\35\4\0\1\35\25\0\1\35\5\0"+
    "\10\35\1\237\15\35\4\0\1\35\25\0\1\35\5\0"+
    "\22\35\1\240\3\35\4\0\1\35\25\0\1\35\5\0"+
    "\7\35\1\241\16\35\4\0\1\35\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5832];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\25\1\4\11\1\1\2\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\1\0\1\1"+
    "\1\0\4\11\25\1\2\11\1\1\1\11\1\0\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<ErrorS> listaErrores =  new LinkedList<>();
    private int DESCARTE;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { listaErrores.add(new ErrorS(\"Error lexico\", \"Caracter \" + yytext() + \"no pertenece al lenguaje\", yyline, yycolumn)); }");
            { listaErrores.add(new ErrorS("Error lexico", "Caracter " + yytext() + "no pertenece al lenguaje", yyline, yycolumn));
            }
          // fall through
          case 66: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] {  }");
            { 
            }
          // fall through
          case 67: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return new Symbol(sym.NOT, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
            }
          // fall through
          case 68: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return new Symbol(sym.MODULO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MODULO, yyline, yycolumn,yytext());
            }
          // fall through
          case 69: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { return new Symbol(DESCARTE, yyline, yycolumn, yytext()); }");
            { return new Symbol(DESCARTE, yyline, yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
            }
          // fall through
          case 71: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
            }
          // fall through
          case 72: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { return new Symbol(sym.MULT, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MULT, yyline, yycolumn,yytext());
            }
          // fall through
          case 73: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { return new Symbol(sym.MAS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MAS, yyline, yycolumn,yytext());
            }
          // fall through
          case 74: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return new Symbol(sym.COMA, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
            }
          // fall through
          case 75: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return new Symbol(sym.MENOS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MENOS, yyline, yycolumn,yytext());
            }
          // fall through
          case 76: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { return new Symbol(sym.DOTT, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.DOTT, yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { return new Symbol(sym.DIV, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DIV, yyline, yycolumn,yytext());
            }
          // fall through
          case 78: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
            }
          // fall through
          case 79: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return new Symbol(sym.DOS_PUNTOS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DOS_PUNTOS, yyline, yycolumn,yytext());
            }
          // fall through
          case 80: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { return new Symbol(sym.FINCADENA, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.FINCADENA, yyline, yycolumn,yytext());
            }
          // fall through
          case 81: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return new Symbol(sym.MENOR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 82: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 83: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 84: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { return new Symbol(sym.ID, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            }
          // fall through
          case 85: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return new Symbol(sym.BRACKET_A, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.BRACKET_A, yyline, yycolumn,yytext());
            }
          // fall through
          case 86: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return new Symbol(sym.BRACKET_C, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.BRACKET_C, yyline, yycolumn,yytext());
            }
          // fall through
          case 87: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { return new Symbol(sym.XOR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.XOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 88: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return new Symbol(sym.DEFAULT, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DEFAULT, yyline, yycolumn,yytext());
            }
          // fall through
          case 89: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return new Symbol(sym.LLAVE_A, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.LLAVE_A, yyline, yycolumn,yytext());
            }
          // fall through
          case 90: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return new Symbol(sym.LLAVE_C, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.LLAVE_C, yyline, yycolumn,yytext());
            }
          // fall through
          case 91: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return new Symbol(sym.DIFERENCIA, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DIFERENCIA, yyline, yycolumn,yytext());
            }
          // fall through
          case 92: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { String cadena = yytext();"+ZZ_NL+"    cadena = cadena.substring(1, cadena.length()-1);"+ZZ_NL+"    cadena = cadena.replace(\"\\\\n\", \"\\n\");"+ZZ_NL+"    cadena = cadena.replace(\"\\\\t\",\"\\t\");"+ZZ_NL+"    cadena = cadena.replace(\"\\\\\\\\\",\"\\\\\");"+ZZ_NL+"    cadena = cadena.replace(\"\\\"\",\"\'\"+\"\'\");"+ZZ_NL+"    cadena = cadena.replace(\"\\\\\'\", \"\'\");"+ZZ_NL+"    return new Symbol(sym.CADENA, yyline, yycolumn,cadena); }");
            { String cadena = yytext();
    cadena = cadena.substring(1, cadena.length()-1);
    cadena = cadena.replace("\\n", "\n");
    cadena = cadena.replace("\\t","\t");
    cadena = cadena.replace("\\\\","\\");
    cadena = cadena.replace("\"","'"+"'");
    cadena = cadena.replace("\\'", "'");
    return new Symbol(sym.CADENA, yyline, yycolumn,cadena);
            }
          // fall through
          case 93: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { return new Symbol(sym.AND, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.AND, yyline, yycolumn,yytext());
            }
          // fall through
          case 94: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { return new Symbol(sym.POTENCIA, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.POTENCIA, yyline, yycolumn,yytext());
            }
          // fall through
          case 95: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return new Symbol(sym.INCREMENTO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.INCREMENTO, yyline, yycolumn,yytext());
            }
          // fall through
          case 96: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return new Symbol(sym.DECREMENTO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DECREMENTO, yyline, yycolumn,yytext());
            }
          // fall through
          case 97: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return new Symbol(sym.MENOR_IGUAL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MENOR_IGUAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return new Symbol(sym.IGUALACION, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.IGUALACION, yyline, yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return new Symbol(sym.FLECHA, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.FLECHA, yyline, yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return new Symbol(sym.MAYOR_IGUAL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MAYOR_IGUAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return new Symbol(sym.DO_C, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DO_C, yyline, yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return new Symbol(sym.IF, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.IF, yyline, yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return new Symbol(sym.BRACKETS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.BRACKETS, yyline, yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { return new Symbol(sym.OR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.OR, yyline, yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { return new Symbol(sym.CARACTER, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.CARACTER, yyline, yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return new Symbol(sym.FORC, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.FORC, yyline, yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { return new Symbol(sym.INT, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.INT, yyline, yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return new Symbol(sym.NUEVO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.NUEVO, yyline, yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return new Symbol(sym.VAR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.VAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { return new Symbol(sym.BOOLEAN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.BOOLEAN, yyline, yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { return new Symbol(sym.CHAR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.CHAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return new Symbol(sym.ELSE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.ELSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 114: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return new Symbol(sym.LISTA, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.LISTA, yyline, yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { return new Symbol(sym.BOOL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.BOOL, yyline, yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return new Symbol(sym.TVOID, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.TVOID, yyline, yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 53:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return new Symbol(sym.FIN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.FIN, yyline, yycolumn,yytext());
            }
          // fall through
          case 118: break;
          case 54:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return new Symbol(sym.CONST, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.CONST, yyline, yycolumn,yytext());
            }
          // fall through
          case 119: break;
          case 55:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return new Symbol(sym.MATCH, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MATCH, yyline, yycolumn,yytext());
            }
          // fall through
          case 120: break;
          case 56:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return new Symbol(sym.WHILEC, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.WHILEC, yyline, yycolumn,yytext());
            }
          // fall through
          case 121: break;
          case 57:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return new Symbol(sym.APEL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.APEL, yyline, yycolumn,yytext());
            }
          // fall through
          case 122: break;
          case 58:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { return new Symbol(sym.DOUBLE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DOUBLE, yyline, yycolumn,yytext());
            }
          // fall through
          case 123: break;
          case 59:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return new Symbol(sym.REST, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.REST, yyline, yycolumn,yytext());
            }
          // fall through
          case 124: break;
          case 60:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return new Symbol(sym.RETORNO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RETORNO, yyline, yycolumn,yytext());
            }
          // fall through
          case 125: break;
          case 61:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return new Symbol(sym.STRING, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.STRING, yyline, yycolumn,yytext());
            }
          // fall through
          case 126: break;
          case 62:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return new Symbol(sym.STRUCT, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.STRUCT, yyline, yycolumn,yytext());
            }
          // fall through
          case 127: break;
          case 63:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { return new Symbol(sym.IMPRIMIR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.IMPRIMIR, yyline, yycolumn,yytext());
            }
          // fall through
          case 128: break;
          case 64:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return new Symbol(sym.CONTINUAR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.CONTINUAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 129: break;
          case 65:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return new Symbol(sym.START, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.START, yyline, yycolumn,yytext());
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scanner scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scanner(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
