
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.HashMap;
import instrucciones.Start;
import java_cup.runtime.Symbol;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.TipoDato;
import instrucciones.IF;
import instrucciones.Else;
import instrucciones.Match;
import expresiones.Caso;
import instrucciones.ForC;
import instrucciones.WhileC;
import instrucciones.Print;
import instrucciones.AsignacionVar;
import instrucciones.OperacionUnitaria;
import instrucciones.List;
import expresiones.RestList;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import java.util.LinkedList;
import excepciones.ErrorS;
import expresiones.Casteo;
import instrucciones.Declaracion;
import expresiones.AccesoVar;
import expresiones.TipoMutable;
import instrucciones.Dow;
import instrucciones.Fin;
import instrucciones.Vector;
import expresiones.AccesoVec;
import instrucciones.Metodo;
import instrucciones.AsignarVec;
import simbolo.TipoEDD;
import instrucciones.ApenList;
import instrucciones.Retorno;
import instrucciones.Struct;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\044\010\000\002" +
    "\045\007\000\002\045\006\000\002\033\010\000\002\034" +
    "\004\000\002\034\005\000\002\035\006\000\002\035\004" +
    "\000\002\040\005\000\002\041\006\000\002\041\005\000" +
    "\002\042\005\000\002\042\003\000\002\043\005\000\002" +
    "\043\004\000\002\036\015\000\002\026\012\000\002\026" +
    "\015\000\002\037\011\000\002\027\011\000\002\027\014" +
    "\000\002\027\011\000\002\032\005\000\002\032\003\000" +
    "\002\031\005\000\002\030\005\000\002\030\003\000\002" +
    "\024\007\000\002\025\010\000\002\025\007\000\002\025" +
    "\007\000\002\023\004\000\002\023\004\000\002\022\013" +
    "\000\002\021\011\000\002\016\014\000\002\020\003\000" +
    "\002\020\003\000\002\012\006\000\002\012\005\000\002" +
    "\011\011\000\002\011\007\000\002\013\005\000\002\013" +
    "\005\000\002\017\005\000\002\017\004\000\002\017\004" +
    "\000\002\006\011\000\002\006\012\000\002\006\015\000" +
    "\002\007\004\000\002\010\007\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\006\000\002\005\011\000" +
    "\002\005\010\000\002\005\003\000\002\005\006\000\002" +
    "\005\005\000\002\005\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\056\003\041\011\036\013\013\014\061\015" +
    "\007\045\023\046\021\047\010\050\040\051\056\052\034" +
    "\056\012\057\017\060\005\061\025\062\033\065\027\072" +
    "\044\073\035\100\043\101\037\102\060\001\002\000\062" +
    "\002\ufff2\003\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\065\ufff2\072" +
    "\ufff2\073\ufff2\100\ufff2\101\ufff2\102\ufff2\001\002\000\004" +
    "\054\u0115\001\002\000\004\011\u0107\001\002\000\004\011" +
    "\uff91\001\002\000\016\011\uff96\012\uff96\017\uff96\021\uff96" +
    "\036\uff96\070\uff96\001\002\000\062\002\uffec\003\uffec\011" +
    "\uffec\013\uffec\014\uffec\015\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\065\uffec\072\uffec\073\uffec\100\uffec" +
    "\101\uffec\102\uffec\001\002\000\004\020\362\001\002\000" +
    "\004\020\356\001\002\000\062\002\uffee\003\uffee\011\uffee" +
    "\013\uffee\014\uffee\015\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\062\uffee\065\uffee\072\uffee\073\uffee\100\uffee\101" +
    "\uffee\102\uffee\001\002\000\062\002\ufff4\003\ufff4\011\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\045\ufff4\046\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\061\ufff4\062\ufff4\065\ufff4\072\ufff4\073\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\001\002\000\062\002\ufff7\003\ufff7\011\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\065\ufff7\072\ufff7\073\ufff7\100\ufff7\101" +
    "\ufff7\102\ufff7\001\002\000\004\020\350\001\002\000\062" +
    "\002\ufffa\003\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\065\ufffa\072" +
    "\ufffa\073\ufffa\100\ufffa\101\ufffa\102\ufffa\001\002\000\016" +
    "\011\uff97\012\uff97\017\uff97\021\uff97\036\uff97\070\uff97\001" +
    "\002\000\062\002\ufff1\003\ufff1\011\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\065\ufff1\072\ufff1\073\ufff1\100\ufff1\101\ufff1\102\ufff1\001" +
    "\002\000\016\011\uff98\012\uff98\017\uff98\021\uff98\036\uff98" +
    "\070\uff98\001\002\000\062\002\ufffe\003\ufffe\011\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\062\ufffe\065\ufffe\072\ufffe\073\ufffe\100\ufffe\101\ufffe" +
    "\102\ufffe\001\002\000\004\012\347\001\002\000\060\002" +
    "\000\003\041\011\036\013\013\014\061\015\007\045\023" +
    "\046\021\047\010\050\040\051\056\052\034\056\012\057" +
    "\017\060\005\061\025\062\033\065\027\072\044\073\035" +
    "\100\043\101\037\102\060\001\002\000\024\004\105\005" +
    "\112\006\107\007\110\010\120\011\115\020\106\023\111" +
    "\042\116\001\002\000\062\002\ufff6\003\ufff6\011\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\065\ufff6\072\ufff6\073\ufff6\100\ufff6\101\ufff6" +
    "\102\ufff6\001\002\000\004\011\307\001\002\000\062\002" +
    "\ufff8\003\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\065\ufff8\072\ufff8" +
    "\073\ufff8\100\ufff8\101\ufff8\102\ufff8\001\002\000\004\012" +
    "\306\001\002\000\004\020\271\001\002\000\004\035\257" +
    "\001\002\000\016\017\213\020\104\043\215\044\211\066" +
    "\214\075\212\001\002\000\026\004\105\005\112\006\107" +
    "\007\110\010\120\011\115\012\206\020\106\023\111\042" +
    "\116\001\002\000\016\011\uff94\012\uff94\017\uff94\021\uff94" +
    "\036\uff94\070\uff94\001\002\000\004\012\205\001\002\000" +
    "\062\002\ufff0\003\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\065\ufff0" +
    "\072\ufff0\073\ufff0\100\ufff0\101\ufff0\102\ufff0\001\002\000" +
    "\004\011\101\001\002\000\016\011\uff93\012\uff93\017\uff93" +
    "\021\uff93\036\uff93\070\uff93\001\002\000\062\002\ufffb\003" +
    "\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\065\ufffb\072\ufffb\073\ufffb" +
    "\100\ufffb\101\ufffb\102\ufffb\001\002\000\062\002\ufffc\003" +
    "\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\065\ufffc\072\ufffc\073\ufffc" +
    "\100\ufffc\101\ufffc\102\ufffc\001\002\000\062\002\ufff5\003" +
    "\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\065\ufff5\072\ufff5\073\ufff5" +
    "\100\ufff5\101\ufff5\102\ufff5\001\002\000\062\002\uffeb\003" +
    "\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb\072\uffeb\073\uffeb" +
    "\100\uffeb\101\uffeb\102\uffeb\001\002\000\062\002\uffef\003" +
    "\uffef\011\uffef\013\uffef\014\uffef\015\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\065\uffef\072\uffef\073\uffef" +
    "\100\uffef\101\uffef\102\uffef\001\002\000\062\002\ufff9\003" +
    "\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\065\ufff9\072\ufff9\073\ufff9" +
    "\100\ufff9\101\ufff9\102\ufff9\001\002\000\062\002\ufffd\003" +
    "\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\065\ufffd\072\ufffd\073\ufffd" +
    "\100\ufffd\101\ufffd\102\ufffd\001\002\000\062\002\ufff3\003" +
    "\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\061\ufff3\062\ufff3\065\ufff3\072\ufff3\073\ufff3" +
    "\100\ufff3\101\ufff3\102\ufff3\001\002\000\004\012\100\001" +
    "\002\000\016\011\uff95\012\uff95\017\uff95\021\uff95\036\uff95" +
    "\070\uff95\001\002\000\004\002\077\001\002\000\004\054" +
    "\062\001\002\000\004\011\uff92\001\002\000\004\011\063" +
    "\001\002\000\004\016\074\001\002\000\006\011\065\055" +
    "\066\001\002\000\004\016\071\001\002\000\004\011\067" +
    "\001\002\000\004\012\070\001\002\000\062\002\uffe9\003" +
    "\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\065\uffe9\072\uffe9\073\uffe9" +
    "\100\uffe9\101\uffe9\102\uffe9\001\002\000\004\011\072\001" +
    "\002\000\004\012\073\001\002\000\006\011\uffe8\055\uffe8" +
    "\001\002\000\004\011\075\001\002\000\004\012\076\001" +
    "\002\000\006\011\uffe7\055\uffe7\001\002\000\004\002\001" +
    "\001\002\000\062\002\uffed\003\uffed\011\uffed\013\uffed\014" +
    "\uffed\015\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\065\uffed\072\uffed\073\uffed\100\uffed\101\uffed\102\uffed" +
    "\001\002\000\004\020\104\001\002\000\004\012\103\001" +
    "\002\000\062\002\uffe1\003\uffe1\011\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\065\uffe1\072\uffe1\073\uffe1\100\uffe1\101\uffe1\102\uffe1\001" +
    "\002\000\026\004\105\005\112\006\107\007\110\010\120" +
    "\011\115\020\106\021\121\023\111\042\116\001\002\000" +
    "\054\012\uffa2\021\uffa2\022\uffa2\023\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\054\uffa2\064\uffa2" +
    "\067\uffa2\071\uffa2\001\002\000\040\004\105\005\112\006" +
    "\107\007\110\010\120\011\115\020\106\023\111\042\116" +
    "\045\023\046\021\047\010\050\040\051\056\072\044\001" +
    "\002\000\054\012\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\054\uffa3" +
    "\064\uffa3\067\uffa3\071\uffa3\001\002\000\054\012\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\054\uffa1\064\uffa1\067\uffa1\071\uffa1" +
    "\001\002\000\024\004\105\005\112\006\107\007\110\010" +
    "\120\011\115\020\106\023\111\042\116\001\002\000\054" +
    "\012\uffa4\021\uffa4\022\uffa4\023\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\054\uffa4\064\uffa4\067" +
    "\uffa4\071\uffa4\001\002\000\054\012\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\054\uffa0\064\uffa0\067\uffa0\071\uffa0\001\002\000" +
    "\006\021\175\071\174\001\002\000\062\012\uff99\020\104" +
    "\021\uff99\022\uff99\023\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\054\uff99\064\uff99\066\162\067" +
    "\uff99\071\uff99\075\161\001\002\000\024\004\105\005\112" +
    "\006\107\007\110\010\120\011\115\020\106\023\111\042" +
    "\116\001\002\000\044\021\uffdd\022\132\023\125\025\130" +
    "\026\135\027\124\030\134\031\136\032\131\033\127\034" +
    "\140\035\126\036\133\037\137\040\122\041\123\071\uffdd" +
    "\001\002\000\054\012\uff9c\021\uff9c\022\uff9c\023\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\054" +
    "\uff9c\064\uff9c\067\uff9c\071\uff9c\001\002\000\054\012\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\054\uffdf\064\uffdf\067\uffdf\071" +
    "\uffdf\001\002\000\024\004\105\005\112\006\107\007\110" +
    "\010\120\011\115\020\106\023\111\042\116\001\002\000" +
    "\024\004\105\005\112\006\107\007\110\010\120\011\115" +
    "\020\106\023\111\042\116\001\002\000\024\004\105\005" +
    "\112\006\107\007\110\010\120\011\115\020\106\023\111" +
    "\042\116\001\002\000\024\004\105\005\112\006\107\007" +
    "\110\010\120\011\115\020\106\023\111\042\116\001\002" +
    "\000\024\004\105\005\112\006\107\007\110\010\120\011" +
    "\115\020\106\023\111\042\116\001\002\000\024\004\105" +
    "\005\112\006\107\007\110\010\120\011\115\020\106\023" +
    "\111\042\116\001\002\000\024\004\105\005\112\006\107" +
    "\007\110\010\120\011\115\020\106\023\111\042\116\001" +
    "\002\000\024\004\105\005\112\006\107\007\110\010\120" +
    "\011\115\020\106\023\111\042\116\001\002\000\024\004" +
    "\105\005\112\006\107\007\110\010\120\011\115\020\106" +
    "\023\111\042\116\001\002\000\024\004\105\005\112\006" +
    "\107\007\110\010\120\011\115\020\106\023\111\042\116" +
    "\001\002\000\024\004\105\005\112\006\107\007\110\010" +
    "\120\011\115\020\106\023\111\042\116\001\002\000\024" +
    "\004\105\005\112\006\107\007\110\010\120\011\115\020" +
    "\106\023\111\042\116\001\002\000\024\004\105\005\112" +
    "\006\107\007\110\010\120\011\115\020\106\023\111\042" +
    "\116\001\002\000\024\004\105\005\112\006\107\007\110" +
    "\010\120\011\115\020\106\023\111\042\116\001\002\000" +
    "\024\004\105\005\112\006\107\007\110\010\120\011\115" +
    "\020\106\023\111\042\116\001\002\000\054\012\uffaf\021" +
    "\uffaf\022\132\023\125\025\130\026\135\027\124\030\134" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\054\uffaf\064\uffaf\067\uffaf\071\uffaf" +
    "\001\002\000\054\012\uffb2\021\uffb2\022\132\023\125\025" +
    "\130\026\135\027\124\030\134\031\136\032\131\033\127" +
    "\034\140\035\126\036\133\037\uffb2\040\122\041\123\054" +
    "\uffb2\064\uffb2\067\uffb2\071\uffb2\001\002\000\054\012\uffac" +
    "\021\uffac\022\132\023\125\025\130\026\135\027\124\030" +
    "\134\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\054\uffac\064\uffac\067\uffac\071" +
    "\uffac\001\002\000\054\012\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\025\uffa9\026\uffa9\027\124\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\054\uffa9\064\uffa9\067\uffa9\071\uffa9\001\002\000\054\012" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uffa7\026\uffa7\027\124" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\054\uffa7\064\uffa7\067\uffa7" +
    "\071\uffa7\001\002\000\054\012\uffb0\021\uffb0\022\132\023" +
    "\125\025\130\026\135\027\124\030\134\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\054\uffb0\064\uffb0\067\uffb0\071\uffb0\001\002\000\054" +
    "\012\uffaa\021\uffaa\022\uffaa\023\uffaa\025\130\026\135\027" +
    "\124\030\134\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\054\uffaa\064\uffaa\067" +
    "\uffaa\071\uffaa\001\002\000\054\012\uffad\021\uffad\022\132" +
    "\023\125\025\130\026\135\027\124\030\134\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\054\uffad\064\uffad\067\uffad\071\uffad\001\002\000" +
    "\054\012\uffa6\021\uffa6\022\uffa6\023\uffa6\025\uffa6\026\uffa6" +
    "\027\124\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\054\uffa6\064\uffa6" +
    "\067\uffa6\071\uffa6\001\002\000\054\012\uffae\021\uffae\022" +
    "\132\023\125\025\130\026\135\027\124\030\134\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\054\uffae\064\uffae\067\uffae\071\uffae\001\002" +
    "\000\054\012\uffb1\021\uffb1\022\132\023\125\025\130\026" +
    "\135\027\124\030\134\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\054\uffb1\064" +
    "\uffb1\067\uffb1\071\uffb1\001\002\000\054\012\uffab\021\uffab" +
    "\022\uffab\023\uffab\025\130\026\135\027\124\030\134\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\054\uffab\064\uffab\067\uffab\071\uffab\001" +
    "\002\000\052\012\uffa8\021\uffa8\022\uffa8\023\uffa8\025\uffa8" +
    "\026\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\054\uffa8\064\uffa8" +
    "\067\uffa8\071\uffa8\001\002\000\054\012\uffb4\021\uffb4\022" +
    "\132\023\125\025\130\026\135\027\124\030\134\031\136" +
    "\032\131\033\127\034\140\035\126\036\133\037\uffb4\040" +
    "\uffb4\041\uffb4\054\uffb4\064\uffb4\067\uffb4\071\uffb4\001\002" +
    "\000\054\012\uffb3\021\uffb3\022\132\023\125\025\130\026" +
    "\135\027\124\030\134\031\136\032\131\033\127\034\140" +
    "\035\126\036\133\037\uffb3\040\uffb3\041\123\054\uffb3\064" +
    "\uffb3\067\uffb3\071\uffb3\001\002\000\054\012\uffb5\021\uffb5" +
    "\022\132\023\125\025\130\026\135\027\124\030\134\031" +
    "\136\032\131\033\127\034\140\035\126\036\133\037\uffb5" +
    "\040\uffb5\041\uffb5\054\uffb5\064\uffb5\067\uffb5\071\uffb5\001" +
    "\002\000\004\077\170\001\002\000\024\004\105\005\112" +
    "\006\107\007\110\010\120\011\115\020\106\023\111\042" +
    "\116\001\002\000\042\022\132\023\125\025\130\026\135" +
    "\027\124\030\134\031\136\032\131\033\127\034\140\035" +
    "\126\036\133\037\137\040\122\041\123\067\164\001\002" +
    "\000\056\012\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\054\uff9f\064" +
    "\uff9f\066\165\067\uff9f\071\uff9f\001\002\000\024\004\105" +
    "\005\112\006\107\007\110\010\120\011\115\020\106\023" +
    "\111\042\116\001\002\000\042\022\132\023\125\025\130" +
    "\026\135\027\124\030\134\031\136\032\131\033\127\034" +
    "\140\035\126\036\133\037\137\040\122\041\123\067\167" +
    "\001\002\000\054\012\uff9e\021\uff9e\022\uff9e\023\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\054" +
    "\uff9e\064\uff9e\067\uff9e\071\uff9e\001\002\000\004\020\171" +
    "\001\002\000\024\004\105\005\112\006\107\007\110\010" +
    "\120\011\115\020\106\023\111\042\116\001\002\000\042" +
    "\021\173\022\132\023\125\025\130\026\135\027\124\030" +
    "\134\031\136\032\131\033\127\034\140\035\126\036\133" +
    "\037\137\040\122\041\123\001\002\000\054\012\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\054\uff9d\064\uff9d\067\uff9d\071\uff9d" +
    "\001\002\000\024\004\105\005\112\006\107\007\110\010" +
    "\120\011\115\020\106\023\111\042\116\001\002\000\054" +
    "\012\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\054\uffe0\064\uffe0\067" +
    "\uffe0\071\uffe0\001\002\000\044\021\uffde\022\132\023\125" +
    "\025\130\026\135\027\124\030\134\031\136\032\131\033" +
    "\127\034\140\035\126\036\133\037\137\040\122\041\123" +
    "\071\uffde\001\002\000\054\012\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\054\uffa5\064\uffa5\067\uffa5\071\uffa5\001\002\000\004" +
    "\021\203\001\002\000\042\021\202\022\132\023\125\025" +
    "\130\026\135\027\124\030\134\031\136\032\131\033\127" +
    "\034\140\035\126\036\133\037\137\040\122\041\123\001" +
    "\002\000\054\012\uff9a\021\uff9a\022\uff9a\023\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\054\uff9a" +
    "\064\uff9a\067\uff9a\071\uff9a\001\002\000\024\004\105\005" +
    "\112\006\107\007\110\010\120\011\115\020\106\023\111" +
    "\042\116\001\002\000\054\012\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\054\uff9b\064\uff9b\067\uff9b\071\uff9b\001\002\000\062" +
    "\002\uffea\003\uffea\011\uffea\013\uffea\014\uffea\015\uffea\045" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\065\uffea\072" +
    "\uffea\073\uffea\100\uffea\101\uffea\102\uffea\001\002\000\062" +
    "\002\uffdb\003\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\065\uffdb\072" +
    "\uffdb\073\uffdb\100\uffdb\101\uffdb\102\uffdb\001\002\000\042" +
    "\012\210\022\132\023\125\025\130\026\135\027\124\030" +
    "\134\031\136\032\131\033\127\034\140\035\126\036\133" +
    "\037\137\040\122\041\123\001\002\000\062\002\uffdc\003" +
    "\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\065\uffdc\072\uffdc\073\uffdc" +
    "\100\uffdc\101\uffdc\102\uffdc\001\002\000\004\012\256\001" +
    "\002\000\004\076\251\001\002\000\024\004\105\005\112" +
    "\006\107\007\110\010\120\011\246\020\106\023\111\042" +
    "\116\001\002\000\024\004\105\005\112\006\107\007\110" +
    "\010\120\011\115\020\106\023\111\042\116\001\002\000" +
    "\004\012\216\001\002\000\102\002\uffbf\003\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\020\uffbf\023\uffbf\042\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\065\uffbf\072\uffbf\073\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\001\002\000\042\022\132\023" +
    "\125\025\130\026\135\027\124\030\134\031\136\032\131" +
    "\033\127\034\140\035\126\036\133\037\137\040\122\041" +
    "\123\067\220\001\002\000\006\017\221\066\222\001\002" +
    "\000\026\004\105\005\112\006\107\007\110\010\120\011" +
    "\115\020\106\023\111\042\116\066\230\001\002\000\024" +
    "\004\105\005\112\006\107\007\110\010\120\011\115\020" +
    "\106\023\111\042\116\001\002\000\042\022\132\023\125" +
    "\025\130\026\135\027\124\030\134\031\136\032\131\033" +
    "\127\034\140\035\126\036\133\037\137\040\122\041\123" +
    "\067\224\001\002\000\004\017\225\001\002\000\024\004" +
    "\105\005\112\006\107\007\110\010\120\011\115\020\106" +
    "\023\111\042\116\001\002\000\042\012\227\022\132\023" +
    "\125\025\130\026\135\027\124\030\134\031\136\032\131" +
    "\033\127\034\140\035\126\036\133\037\137\040\122\041" +
    "\123\001\002\000\062\002\uffd5\003\uffd5\011\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\065\uffd5\072\uffd5\073\uffd5\100\uffd5\101\uffd5\102" +
    "\uffd5\001\002\000\024\004\105\005\112\006\107\007\110" +
    "\010\120\011\115\020\106\023\111\042\116\001\002\000" +
    "\010\012\uffd2\067\uffd2\071\236\001\002\000\004\012\235" +
    "\001\002\000\042\012\234\022\132\023\125\025\130\026" +
    "\135\027\124\030\134\031\136\032\131\033\127\034\140" +
    "\035\126\036\133\037\137\040\122\041\123\001\002\000" +
    "\062\002\uffd6\003\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\065\uffd6" +
    "\072\uffd6\073\uffd6\100\uffd6\101\uffd6\102\uffd6\001\002\000" +
    "\062\002\uffd4\003\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\065\uffd4" +
    "\072\uffd4\073\uffd4\100\uffd4\101\uffd4\102\uffd4\001\002\000" +
    "\004\066\230\001\002\000\006\012\uffd3\067\uffd3\001\002" +
    "\000\004\067\244\001\002\000\044\022\132\023\125\025" +
    "\130\026\135\027\124\030\134\031\136\032\131\033\127" +
    "\034\140\035\126\036\133\037\137\040\122\041\123\067" +
    "\uffcf\071\242\001\002\000\024\004\105\005\112\006\107" +
    "\007\110\010\120\011\115\020\106\023\111\042\116\001" +
    "\002\000\004\067\uffd0\001\002\000\010\012\uffd1\067\uffd1" +
    "\071\uffd1\001\002\000\102\002\uffc2\003\uffc2\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\020\uffc2\023\uffc2\042\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\065\uffc2\072\uffc2\073\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\001\002\000\054\012\uff99\020\104" +
    "\022\uff99\023\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\043\215\044\211\066\162\075\161\001" +
    "\002\000\042\012\250\022\132\023\125\025\130\026\135" +
    "\027\124\030\134\031\136\032\131\033\127\034\140\035" +
    "\126\036\133\037\137\040\122\041\123\001\002\000\102" +
    "\002\uffc3\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\020\uffc3\023\uffc3" +
    "\042\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\065\uffc3\072\uffc3\073\uffc3\100\uffc3\101\uffc3\102\uffc3\001" +
    "\002\000\004\020\252\001\002\000\024\004\105\005\112" +
    "\006\107\007\110\010\120\011\115\020\106\023\111\042" +
    "\116\001\002\000\042\021\254\022\132\023\125\025\130" +
    "\026\135\027\124\030\134\031\136\032\131\033\127\034" +
    "\140\035\126\036\133\037\137\040\122\041\123\001\002" +
    "\000\004\012\255\001\002\000\062\002\uffd7\003\uffd7\011" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\065\uffd7\072\uffd7\073\uffd7\100\uffd7" +
    "\101\uffd7\102\uffd7\001\002\000\102\002\uffbe\003\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\020\uffbe\023\uffbe\042\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\065\uffbe\072\uffbe\073" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\001\002\000\016\045\023" +
    "\046\021\047\010\050\040\051\056\072\044\001\002\000" +
    "\004\036\261\001\002\000\004\011\262\001\002\000\004" +
    "\017\263\001\002\000\004\074\264\001\002\000\004\073" +
    "\265\001\002\000\004\020\266\001\002\000\004\021\267" +
    "\001\002\000\004\012\270\001\002\000\062\002\uffda\003" +
    "\uffda\011\uffda\013\uffda\014\uffda\015\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\055\uffda\056\uffda\057" +
    "\uffda\060\uffda\061\uffda\062\uffda\065\uffda\072\uffda\073\uffda" +
    "\100\uffda\101\uffda\102\uffda\001\002\000\024\004\105\005" +
    "\112\006\107\007\110\010\120\011\115\020\106\023\111" +
    "\042\116\001\002\000\042\021\273\022\132\023\125\025" +
    "\130\026\135\027\124\030\134\031\136\032\131\033\127" +
    "\034\140\035\126\036\133\037\137\040\122\041\123\001" +
    "\002\000\004\054\274\001\002\000\056\003\041\011\036" +
    "\013\013\014\061\015\007\045\023\046\021\047\010\050" +
    "\040\051\056\052\034\056\012\057\017\060\005\061\025" +
    "\062\033\065\027\072\044\073\035\100\043\101\037\102" +
    "\060\001\002\000\060\003\041\011\036\013\013\014\061" +
    "\015\007\045\023\046\021\047\010\050\040\051\056\052" +
    "\034\055\277\056\012\057\017\060\005\061\025\062\033" +
    "\065\027\072\044\073\035\100\043\101\037\102\060\001" +
    "\002\000\062\002\uffff\003\uffff\011\uffff\013\uffff\014\uffff" +
    "\015\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052" +
    "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff" +
    "\065\uffff\072\uffff\073\uffff\100\uffff\101\uffff\102\uffff\001" +
    "\002\000\064\002\uffba\003\uffba\011\uffba\013\uffba\014\uffba" +
    "\015\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\300\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\065\uffba\072\uffba\073\uffba\100\uffba\101\uffba\102" +
    "\uffba\001\002\000\006\052\034\054\303\001\002\000\062" +
    "\002\uffb9\003\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\065\uffb9\072" +
    "\uffb9\073\uffb9\100\uffb9\101\uffb9\102\uffb9\001\002\000\062" +
    "\002\uffb7\003\uffb7\011\uffb7\013\uffb7\014\uffb7\015\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\065\uffb7\072" +
    "\uffb7\073\uffb7\100\uffb7\101\uffb7\102\uffb7\001\002\000\056" +
    "\003\041\011\036\013\013\014\061\015\007\045\023\046" +
    "\021\047\010\050\040\051\056\052\034\056\012\057\017" +
    "\060\005\061\025\062\033\065\027\072\044\073\035\100" +
    "\043\101\037\102\060\001\002\000\060\003\041\011\036" +
    "\013\013\014\061\015\007\045\023\046\021\047\010\050" +
    "\040\051\056\052\034\055\305\056\012\057\017\060\005" +
    "\061\025\062\033\065\027\072\044\073\035\100\043\101" +
    "\037\102\060\001\002\000\062\002\uffb8\003\uffb8\011\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\065\uffb8\072\uffb8\073\uffb8\100\uffb8\101" +
    "\uffb8\102\uffb8\001\002\000\062\002\uffc9\003\uffc9\011\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\065\uffc9\072\uffc9\073\uffc9\100\uffc9\101" +
    "\uffc9\102\uffc9\001\002\000\004\016\310\001\002\000\016" +
    "\045\023\046\021\047\010\050\040\051\056\072\044\001" +
    "\002\000\010\012\312\017\313\070\314\001\002\000\102" +
    "\002\uffc0\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\023\uffc0" +
    "\042\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\065\uffc0\072\uffc0\073\uffc0\100\uffc0\101\uffc0\102\uffc0\001" +
    "\002\000\024\004\105\005\112\006\107\007\110\010\120" +
    "\011\115\020\106\023\111\042\116\001\002\000\006\017" +
    "\315\070\316\001\002\000\004\066\230\001\002\000\004" +
    "\017\317\001\002\000\004\066\320\001\002\000\004\066" +
    "\230\001\002\000\004\067\322\001\002\000\004\012\323" +
    "\001\002\000\062\002\uffd8\003\uffd8\011\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\065\uffd8\072\uffd8\073\uffd8\100\uffd8\101\uffd8\102\uffd8" +
    "\001\002\000\004\012\325\001\002\000\062\002\uffd9\003" +
    "\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\065\uffd9\072\uffd9\073\uffd9" +
    "\100\uffd9\101\uffd9\102\uffd9\001\002\000\042\012\327\022" +
    "\132\023\125\025\130\026\135\027\124\030\134\031\136" +
    "\032\131\033\127\034\140\035\126\036\133\037\137\040" +
    "\122\041\123\001\002\000\102\002\uffc1\003\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\020\uffc1\023\uffc1\042\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\065\uffc1\072\uffc1\073\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\001\002\000\042\022\132\023" +
    "\125\025\130\026\135\027\124\030\134\031\136\032\131" +
    "\033\127\034\140\035\126\036\133\037\137\040\122\041" +
    "\123\054\331\001\002\000\026\004\105\005\112\006\107" +
    "\007\110\010\120\011\115\020\106\023\111\042\116\063" +
    "\333\001\002\000\004\055\346\001\002\000\004\064\342" +
    "\001\002\000\042\022\132\023\125\025\130\026\135\027" +
    "\124\030\134\031\136\032\131\033\127\034\140\035\126" +
    "\036\133\037\137\040\122\041\123\064\335\001\002\000" +
    "\004\054\336\001\002\000\056\003\041\011\036\013\013" +
    "\014\061\015\007\045\023\046\021\047\010\050\040\051" +
    "\056\052\034\056\012\057\017\060\005\061\025\062\033" +
    "\065\027\072\044\073\035\100\043\101\037\102\060\001" +
    "\002\000\060\003\041\011\036\013\013\014\061\015\007" +
    "\045\023\046\021\047\010\050\040\051\056\052\034\055" +
    "\340\056\012\057\017\060\005\061\025\062\033\065\027" +
    "\072\044\073\035\100\043\101\037\102\060\001\002\000" +
    "\030\004\105\005\112\006\107\007\110\010\120\011\115" +
    "\020\106\023\111\042\116\055\uffcc\063\333\001\002\000" +
    "\004\055\uffcd\001\002\000\004\054\343\001\002\000\056" +
    "\003\041\011\036\013\013\014\061\015\007\045\023\046" +
    "\021\047\010\050\040\051\056\052\034\056\012\057\017" +
    "\060\005\061\025\062\033\065\027\072\044\073\035\100" +
    "\043\101\037\102\060\001\002\000\060\003\041\011\036" +
    "\013\013\014\061\015\007\045\023\046\021\047\010\050" +
    "\040\051\056\052\034\055\345\056\012\057\017\060\005" +
    "\061\025\062\033\065\027\072\044\073\035\100\043\101" +
    "\037\102\060\001\002\000\004\055\uffcb\001\002\000\062" +
    "\002\uffce\003\uffce\011\uffce\013\uffce\014\uffce\015\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\065\uffce\072" +
    "\uffce\073\uffce\100\uffce\101\uffce\102\uffce\001\002\000\062" +
    "\002\uffca\003\uffca\011\uffca\013\uffca\014\uffca\015\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\065\uffca\072" +
    "\uffca\073\uffca\100\uffca\101\uffca\102\uffca\001\002\000\024" +
    "\004\105\005\112\006\107\007\110\010\120\011\115\020" +
    "\106\023\111\042\116\001\002\000\042\021\352\022\132" +
    "\023\125\025\130\026\135\027\124\030\134\031\136\032" +
    "\131\033\127\034\140\035\126\036\133\037\137\040\122" +
    "\041\123\001\002\000\004\054\353\001\002\000\056\003" +
    "\041\011\036\013\013\014\061\015\007\045\023\046\021" +
    "\047\010\050\040\051\056\052\034\056\012\057\017\060" +
    "\005\061\025\062\033\065\027\072\044\073\035\100\043" +
    "\101\037\102\060\001\002\000\060\003\041\011\036\013" +
    "\013\014\061\015\007\045\023\046\021\047\010\050\040" +
    "\051\056\052\034\055\355\056\012\057\017\060\005\061" +
    "\025\062\033\065\027\072\044\073\035\100\043\101\037" +
    "\102\060\001\002\000\062\002\uffc7\003\uffc7\011\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\065\uffc7\072\uffc7\073\uffc7\100\uffc7\101\uffc7" +
    "\102\uffc7\001\002\000\024\004\105\005\112\006\107\007" +
    "\110\010\120\011\115\020\106\023\111\042\116\001\002" +
    "\000\042\021\360\022\132\023\125\025\130\026\135\027" +
    "\124\030\134\031\136\032\131\033\127\034\140\035\126" +
    "\036\133\037\137\040\122\041\123\001\002\000\004\012" +
    "\361\001\002\000\062\002\uffb6\003\uffb6\011\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\065\uffb6\072\uffb6\073\uffb6\100\uffb6\101\uffb6\102" +
    "\uffb6\001\002\000\010\011\364\014\061\015\007\001\002" +
    "\000\004\011\u0104\001\002\000\004\017\213\001\002\000" +
    "\024\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\020\uffc4\023\uffc4\042\uffc4\001\002\000\024\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\020\uffc5\023\uffc5" +
    "\042\uffc5\001\002\000\024\004\105\005\112\006\107\007" +
    "\110\010\120\011\115\020\106\023\111\042\116\001\002" +
    "\000\042\012\371\022\132\023\125\025\130\026\135\027" +
    "\124\030\134\031\136\032\131\033\127\034\140\035\126" +
    "\036\133\037\137\040\122\041\123\001\002\000\004\011" +
    "\372\001\002\000\010\017\u0101\043\u0102\044\u0100\001\002" +
    "\000\004\021\374\001\002\000\004\054\375\001\002\000" +
    "\056\003\041\011\036\013\013\014\061\015\007\045\023" +
    "\046\021\047\010\050\040\051\056\052\034\056\012\057" +
    "\017\060\005\061\025\062\033\065\027\072\044\073\035" +
    "\100\043\101\037\102\060\001\002\000\060\003\041\011" +
    "\036\013\013\014\061\015\007\045\023\046\021\047\010" +
    "\050\040\051\056\052\034\055\377\056\012\057\017\060" +
    "\005\061\025\062\033\065\027\072\044\073\035\100\043" +
    "\101\037\102\060\001\002\000\062\002\uffc6\003\uffc6\011" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\065\uffc6\072\uffc6\073\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\001\002\000\004\021\uffbb\001\002\000" +
    "\024\004\105\005\112\006\107\007\110\010\120\011\115" +
    "\020\106\023\111\042\116\001\002\000\004\021\uffbc\001" +
    "\002\000\042\021\uffbd\022\132\023\125\025\130\026\135" +
    "\027\124\030\134\031\136\032\131\033\127\034\140\035" +
    "\126\036\133\037\137\040\122\041\123\001\002\000\004" +
    "\016\u0105\001\002\000\016\045\023\046\021\047\010\050" +
    "\040\051\056\072\044\001\002\000\006\012\312\017\313" +
    "\001\002\000\004\020\u0108\001\002\000\020\021\u010f\045" +
    "\023\046\021\047\010\050\040\051\056\072\044\001\002" +
    "\000\004\054\u010a\001\002\000\056\003\041\011\036\013" +
    "\013\014\061\015\007\045\023\046\021\047\010\050\040" +
    "\051\056\052\034\056\012\057\017\060\005\061\025\062" +
    "\033\065\027\072\044\073\035\100\043\101\037\102\060" +
    "\001\002\000\060\003\041\011\036\013\013\014\061\015" +
    "\007\045\023\046\021\047\010\050\040\051\056\052\034" +
    "\055\u010c\056\012\057\017\060\005\061\025\062\033\065" +
    "\027\072\044\073\035\100\043\101\037\102\060\001\002" +
    "\000\062\002\uffe6\003\uffe6\011\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\065" +
    "\uffe6\072\uffe6\073\uffe6\100\uffe6\101\uffe6\102\uffe6\001\002" +
    "\000\004\011\u0114\001\002\000\006\021\u0111\071\u0110\001" +
    "\002\000\004\054\uffe5\001\002\000\016\045\023\046\021" +
    "\047\010\050\040\051\056\072\044\001\002\000\004\054" +
    "\uffe4\001\002\000\004\011\u0113\001\002\000\006\021\uffe3" +
    "\071\uffe3\001\002\000\006\021\uffe2\071\uffe2\001\002\000" +
    "\056\003\041\011\036\013\013\014\061\015\007\045\023" +
    "\046\021\047\010\050\040\051\056\052\034\056\012\057" +
    "\017\060\005\061\025\062\033\065\027\072\044\073\035" +
    "\100\043\101\037\102\060\001\002\000\060\003\041\011" +
    "\036\013\013\014\061\015\007\045\023\046\021\047\010" +
    "\050\040\051\056\052\034\055\u0117\056\012\057\017\060" +
    "\005\061\025\062\033\065\027\072\044\073\035\100\043" +
    "\101\037\102\060\001\002\000\004\057\u0118\001\002\000" +
    "\004\020\u0119\001\002\000\024\004\105\005\112\006\107" +
    "\007\110\010\120\011\115\020\106\023\111\042\116\001" +
    "\002\000\042\021\u011b\022\132\023\125\025\130\026\135" +
    "\027\124\030\134\031\136\032\131\033\127\034\140\035" +
    "\126\036\133\037\137\040\122\041\123\001\002\000\004" +
    "\012\u011c\001\002\000\062\002\uffc8\003\uffc8\011\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\065\uffc8\072\uffc8\073\uffc8\100\uffc8\101\uffc8" +
    "\102\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\062\002\056\003\025\004\023\006\031\010" +
    "\052\011\045\012\044\013\051\014\030\015\005\016\015" +
    "\021\027\022\046\023\014\024\053\026\003\027\017\033" +
    "\021\036\050\037\041\040\047\041\054\043\013\044\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\004\275" +
    "\006\031\010\052\011\045\012\044\013\051\014\030\015" +
    "\005\016\015\021\027\022\046\023\014\024\053\026\003" +
    "\027\017\033\021\036\050\037\041\040\047\041\054\043" +
    "\013\044\010\001\001\000\006\005\327\041\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\206\041\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\116\041\112\042\113\001\001\000" +
    "\002\001\001\000\010\005\200\015\177\041\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\176\041" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\157\041\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\156\041\112\001\001\000\006\005\155\041" +
    "\112\001\001\000\006\005\154\041\112\001\001\000\006" +
    "\005\153\041\112\001\001\000\006\005\152\041\112\001" +
    "\001\000\006\005\151\041\112\001\001\000\006\005\150" +
    "\041\112\001\001\000\006\005\147\041\112\001\001\000" +
    "\006\005\146\041\112\001\001\000\006\005\145\041\112" +
    "\001\001\000\006\005\144\041\112\001\001\000\006\005" +
    "\143\041\112\001\001\000\006\005\142\041\112\001\001" +
    "\000\006\005\141\041\112\001\001\000\006\005\140\041" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\162\041\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\165" +
    "\041\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\171\041\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\175\041\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\203\041\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\246" +
    "\013\244\041\112\001\001\000\006\005\216\041\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\232\031\230\032\231\041" +
    "\112\001\001\000\006\005\222\041\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\225\041\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\240" +
    "\030\237\041\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\230\032\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\240\030\242" +
    "\041\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\252\041\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\271\041\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\274\004\023\006\031\010\052\011\045\012\044\013\051" +
    "\014\030\015\005\016\015\021\027\022\046\023\014\024" +
    "\053\026\003\027\017\033\021\036\050\037\041\040\047" +
    "\041\054\043\013\044\010\001\001\000\056\004\275\006" +
    "\031\010\052\011\045\012\044\013\051\014\030\015\005" +
    "\016\015\021\027\022\046\023\014\024\053\026\003\027" +
    "\017\033\021\036\050\037\041\040\047\041\054\043\013" +
    "\044\010\001\001\000\002\001\001\000\004\007\300\001" +
    "\001\000\004\006\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\003\303\004\023\006\031\010\052\011" +
    "\045\012\044\013\051\014\030\015\005\016\015\021\027" +
    "\022\046\023\014\024\053\026\003\027\017\033\021\036" +
    "\050\037\041\040\047\041\054\043\013\044\010\001\001" +
    "\000\056\004\275\006\031\010\052\011\045\012\044\013" +
    "\051\014\030\015\005\016\015\021\027\022\046\023\014" +
    "\024\053\026\003\027\017\033\021\036\050\037\041\040" +
    "\047\041\054\043\013\044\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\325" +
    "\041\112\001\001\000\002\001\001\000\006\031\230\032" +
    "\323\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\230\032\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\333\025\331\041\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\336\004\023\006\031\010\052\011\045\012\044" +
    "\013\051\014\030\015\005\016\015\021\027\022\046\023" +
    "\014\024\053\026\003\027\017\033\021\036\050\037\041" +
    "\040\047\041\054\043\013\044\010\001\001\000\056\004" +
    "\275\006\031\010\052\011\045\012\044\013\051\014\030" +
    "\015\005\016\015\021\027\022\046\023\014\024\053\026" +
    "\003\027\017\033\021\036\050\037\041\040\047\041\054" +
    "\043\013\044\010\001\001\000\010\005\333\025\340\041" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\343\004\023\006\031\010\052\011\045\012\044\013" +
    "\051\014\030\015\005\016\015\021\027\022\046\023\014" +
    "\024\053\026\003\027\017\033\021\036\050\037\041\040" +
    "\047\041\054\043\013\044\010\001\001\000\056\004\275" +
    "\006\031\010\052\011\045\012\044\013\051\014\030\015" +
    "\005\016\015\021\027\022\046\023\014\024\053\026\003" +
    "\027\017\033\021\036\050\037\041\040\047\041\054\043" +
    "\013\044\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\350\041\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\353\004\023" +
    "\006\031\010\052\011\045\012\044\013\051\014\030\015" +
    "\005\016\015\021\027\022\046\023\014\024\053\026\003" +
    "\027\017\033\021\036\050\037\041\040\047\041\054\043" +
    "\013\044\010\001\001\000\056\004\275\006\031\010\052" +
    "\011\045\012\044\013\051\014\030\015\005\016\015\021" +
    "\027\022\046\023\014\024\053\026\003\027\017\033\021" +
    "\036\050\037\041\040\047\041\054\043\013\044\010\001" +
    "\001\000\002\001\001\000\006\005\356\041\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\364\012\365\014\362\020\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\367\041\112\001\001\000\002\001\001" +
    "\000\004\017\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\375\004\023\006\031" +
    "\010\052\011\045\012\044\013\051\014\030\015\005\016" +
    "\015\021\027\022\046\023\014\024\053\026\003\027\017" +
    "\033\021\036\050\037\041\040\047\041\054\043\013\044" +
    "\010\001\001\000\056\004\275\006\031\010\052\011\045" +
    "\012\044\013\051\014\030\015\005\016\015\021\027\022" +
    "\046\023\014\024\053\026\003\027\017\033\021\036\050" +
    "\037\041\040\047\041\054\043\013\044\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u0102\041\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0105\001\001\000\002\001\001\000\004" +
    "\034\u0108\001\001\000\006\015\u010c\035\u010d\001\001\000" +
    "\002\001\001\000\060\003\u010a\004\023\006\031\010\052" +
    "\011\045\012\044\013\051\014\030\015\005\016\015\021" +
    "\027\022\046\023\014\024\053\026\003\027\017\033\021" +
    "\036\050\037\041\040\047\041\054\043\013\044\010\001" +
    "\001\000\056\004\275\006\031\010\052\011\045\012\044" +
    "\013\051\014\030\015\005\016\015\021\027\022\046\023" +
    "\014\024\053\026\003\027\017\033\021\036\050\037\041" +
    "\040\047\041\054\043\013\044\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\u0115" +
    "\004\023\006\031\010\052\011\045\012\044\013\051\014" +
    "\030\015\005\016\015\021\027\022\046\023\014\024\053" +
    "\026\003\027\017\033\021\036\050\037\041\040\047\041" +
    "\054\043\013\044\010\001\001\000\056\004\275\006\031" +
    "\010\052\011\045\012\044\013\051\014\030\015\005\016" +
    "\015\021\027\022\046\023\014\024\053\026\003\027\017" +
    "\033\021\036\050\037\041\040\047\041\054\043\013\044" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\u0119\041\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<ErrorS> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new ErrorS("Sintactico R", "No se esperaba el componente"+s.value, s.left, s.right));
        System.out.println("Error Sintactico en la linea " +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new ErrorS("Sintactico  NR", "No se esperaba el componente"+s.value, s.left, s.right));
        System.out.println("Error Sintactico no recuperable en la linea" +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ASIGNACIONV 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= OPERACIONU 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SENT_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FORB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= DOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FINB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= VECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ANIADIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= REGRESO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= LLAMADA FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= STR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= SMAIN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STR ::= STRUCT LLAVE_A LISTR LLAVE_C ID FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,String> a = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Struct(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTR ::= LISTR ID DOS_PUNTOS ID FINCADENA 
            {
              HashMap<String,String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,String> a = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =a; a.put(b.toLowerCase(), c.toLowerCase()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTR ::= ID DOS_PUNTOS ID FINCADENA 
            {
              HashMap<String,String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new HashMap<String, String>();
                                                    RESULT.put(a.toLowerCase(), b.toLowerCase());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODO ::= TIPO ID PARAMETROS LLAVE_A INSTRUCCIONES LLAVE_C 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TipoDato d = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(a,b,c, new Tipo(d),aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS ::= PAR_A PAR_C 
            {
              LinkedList<HashMap> RESULT =null;
		 RESULT = new LinkedList<HashMap>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS ::= PAR_A LISTP PAR_C 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTP ::= LISTP COMA TIPO ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoDato b = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
                                        var hm2 = new HashMap<String, Object>(); 
                                        hm2.put("id", c); 
                                        hm2.put("tipo", new Tipo(b)); RESULT.add(hm2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTP ::= TIPO ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoDato a = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); 
                                        var hm = new HashMap<String, Object>(); 
                                        hm.put("id", b); 
                                        hm.put("tipo", new Tipo(a)); RESULT.add(hm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SMAIN ::= START LLAMADA FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMAIN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LLAMADA ::= ID PAR_A PARLLAMADA PAR_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Start(a,b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLAMADA ::= ID PAR_A PAR_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Start(a, new LinkedList<>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARLLAMADA ::= PARLLAMADA COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARLLAMADA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARLLAMADA ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARLLAMADA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // REGRESO ::= RETORNO EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Retorno(a, aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REGRESO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // REGRESO ::= RETORNO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Retorno(null,aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REGRESO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIST ::= LISTA MENOR TIPO MAYOR ID IGUAL NUEVO LISTA PAR_A PAR_C FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		TipoDato a = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new List(b, new Tipo(a), aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VECTORES ::= MUTABILIDAD ID DOS_PUNTOS TIPO BRACKETS IGUAL BRACK2D FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TipoMutable a = (TipoMutable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TipoDato c = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList> d = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Vector(a, b, d,TipoEDD.VECTOR, new Tipo(c), aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VECTORES ::= MUTABILIDAD ID DOS_PUNTOS TIPO BRACKETS BRACKETS IGUAL BRACKET_A BRACK2D BRACKET_C FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		TipoMutable a = (TipoMutable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TipoDato c = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList> d = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Vector(a, b, d,TipoEDD.VECTOR2D, new Tipo(c), aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ANIADIR ::= ID DOTT APEL PAR_A EXPRESION PAR_C FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ApenList(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANIADIR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACIONV ::= ID BRACKET_A EXPRESION BRACKET_C IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignarVec(a,b,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONV",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACIONV ::= ID BRACKET_A EXPRESION BRACKET_C BRACKET_A EXPRESION BRACKET_C IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignarVec(a,b, d,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONV",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACIONV ::= ID BRACKET_A EXPRESION BRACKET_C IGUAL BRACK2D FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList> c = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignarVec(a,b,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONV",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BRACK2D ::= BRACK COMA BRACK2D 
            {
              LinkedList<LinkedList> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<LinkedList> b = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRACK2D",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BRACK2D ::= BRACK 
            {
              LinkedList<LinkedList> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRACK2D",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BRACK ::= BRACKET_A VALORES BRACKET_C 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BRACK",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALORES ::= EXPRESION COMA VALORES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = b; RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALORES ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CMATCH ::= MATCH EXPRESION LLAVE_A CASOS LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASOS ::= EXPRESION FLECHA LLAVE_A INSTRUCCIONES LLAVE_C CASOS 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Caso> c = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Caso(a,b,aleft,aright)); RESULT.addAll(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASOS ::= EXPRESION FLECHA LLAVE_A INSTRUCCIONES LLAVE_C 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Caso(a,b,aleft,aright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASOS ::= DEFAULT FLECHA LLAVE_A INSTRUCCIONES LLAVE_C 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Caso(a,aleft,aright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FINB ::= FIN FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Fin(aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINB",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FINB ::= CONTINUAR FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fin(true, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINB",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DOWHILE ::= DO_C LLAVE_A INSTRUCCIONES LLAVE_C WHILEC PAR_A EXPRESION PAR_C FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Dow(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CWHILE ::= WHILEC PAR_A EXPRESION PAR_C LLAVE_A INSTRUCCIONES LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileC(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FORB ::= FORC PAR_A ASIG EXPRESION FINCADENA ACTU_FOR PAR_C LLAVE_A INSTRUCCIONES LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ForC(a,b,c,d,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORB",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a,b,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNACION ::= ID IGUAL OPERACIONU 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a,b,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TipoMutable a = (TipoMutable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TipoDato c = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =new Declaracion(true,a,b,d,new Tipo(c),aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TipoMutable a = (TipoMutable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoDato c = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(false,a,b,new Tipo(c),aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACIONU ::= ID INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new OperacionUnitaria(a,true,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACIONU",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACIONU ::= ID DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new OperacionUnitaria(a,false,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACIONU",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACTU_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a,b,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU_FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACTU_FOR ::= ID INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OperacionUnitaria(a,true,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU_FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACTU_FOR ::= ID DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OperacionUnitaria(a,false,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU_FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENT_IF ::= IF PAR_A EXPRESION PAR_C LLAVE_A INSTRUCCIONES LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(a, b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_IF",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENT_IF ::= IF PAR_A EXPRESION PAR_C LLAVE_A INSTRUCCIONES LLAVE_C BUCLE_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IF(a,b,(IF)c, aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_IF",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENT_IF ::= IF PAR_A EXPRESION PAR_C LLAVE_A INSTRUCCIONES LLAVE_C ELSE LLAVE_A INSTRUCCIONES LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new IF(a,b, new Else(c,aleft,aright),aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_IF",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BUCLE_IF ::= ELSE SENT_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BUCLE_IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IMPRESION ::= IMPRIMIR PAR_A EXPRESION PAR_C FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(OperadoresLogicos.NOT , a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.XOR , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION DIFERENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION IGUALACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Double.parseDouble(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= BOOL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= ID BRACKET_A EXPRESION BRACKET_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesoVec(a, b,aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= ID BRACKET_A EXPRESION BRACKET_C BRACKET_A EXPRESION BRACKET_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new AccesoVec(a, b,c, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= ID DOTT REST PAR_A EXPRESION PAR_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RestList(a,b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= PAR_A TIPO PAR_C EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TipoDato a = (TipoDato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteo(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= PAR_A EXPRESION PAR_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVar(a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO ::= INT 
            {
              TipoDato RESULT =null;
		  RESULT = TipoDato.ENTERO;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO ::= DOUBLE 
            {
              TipoDato RESULT =null;
		  RESULT = TipoDato.DECIMAL;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO ::= CHAR 
            {
              TipoDato RESULT =null;
		  RESULT = TipoDato.CARACTER;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO ::= STRING 
            {
              TipoDato RESULT =null;
		 RESULT = TipoDato.CADENA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO ::= BOOLEAN 
            {
              TipoDato RESULT =null;
		 RESULT = TipoDato.BOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO ::= TVOID 
            {
              TipoDato RESULT =null;
		RESULT = TipoDato.VOID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MUTABILIDAD ::= VAR 
            {
              TipoMutable RESULT =null;
		  RESULT = TipoMutable.VAR;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MUTABILIDAD ::= CONST 
            {
              TipoMutable RESULT =null;
		  RESULT = TipoMutable.CONST;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
